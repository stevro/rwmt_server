<?php

namespace Rwmt\Bundle\RwmtBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
/**
 * CarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CarRepository extends EntityRepository
{
    /**
    *
    * getUserCar
    * Returns a single car of an user
    *
    * @param int $userId The id of the user
    * @param int $carId The id of the RideToUser
    * @param \Doctrine\Orm\Query const $hydrationMode
    * @return array/object
    */
   public function getUserCar($userId,$carId,$hydrationMode = Query::HYDRATE_ARRAY){
       $q = $this->createQueryBuilder('c')
               ->select('c, u')
               ->innerJoin('c.owner', 'u')
               ->where('c.id = :carId')
               ->andWhere('u.id = :userId')
               ->setParameter('carId', $carId)
               ->setParameter('userId', $userId)
               ->getQuery();

       return $q->getOneOrNullResult($hydrationMode);
   }

   /**
    *
    * getUserCars
    * Returns all cars for a user from the database
    *
    * @param int $userId The id of the user
    * @param \Doctrine\Orm\Query const $hydrationMode
    * @return array/object
    */
   public function getUserCars($userId,$hydrationMode = Query::HYDRATE_ARRAY){
       $q = $this->createQueryBuilder('c')
               ->select('c, u')
               ->innerJoin('c.owner', 'u')
               ->where('u.id = :userId')
               ->setParameter('userId', $userId)
               ->getQuery();

       return $q->execute(null, $hydrationMode);
   }
}