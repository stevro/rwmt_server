<?php

namespace Rwmt\Bundle\RwmtBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * RideRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RideRepository extends EntityRepository
{
    /**
     * getAllRides
     *
     * Returns a set of rides from the database
     *
     * @param int $max
     * @param \Doctrine\Orm\Query const $hydrationMode
     * @return array/object/collection
     */
    public function getAllRides($max=100,  $hydrationMode = Query::HYDRATE_ARRAY){
       $q = $this->createQueryBuilder('p')
               ->select()
               ->orderBy('p.id','DESC')
               ->setMaxResults($max)
               ->getQuery();

       return $q->execute(null, $hydrationMode);
   }

   /**
    *
    * getRide
    * Returns a single ride from the database
    *
    * @param int $id
    * @param \Doctrine\Orm\Query const $hydrationMode
    * @return array/object
    */
   public function getRide($id,$hydrationMode = Query::HYDRATE_ARRAY){
       $q = $this->createQueryBuilder('p')
               ->select()
               ->where('p.id = :id')
               ->setParameter('id', $id)
               ->getQuery();

       return $q->getOneOrNullResult($hydrationMode);
   }

   /**
    * Gets all the rides that are in $range miles from $long and $lat
    *
    * @param float $long
    * @param float $lat
    * @param int $range
    *
    * @return array An array with the rides found
    */
   public function getClosestRides($long=null, $lat=null, $range=1, $limit = 20)
   {
       #SELECT id, ( 3959 * acos( cos( radians(37) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians(-122) ) + sin( radians(37) ) * sin( radians( lat ) ) ) ) AS distance FROM your_table_name HAVING distance < 25 ORDER BY distance LIMIT 0 , 20;

//       $rsm = new Query\ResultSetMapping();
//       $rsm->addEntityResult('RwmtBundle\Entity\Ride', 'r');
//       $rsm->addFieldResult('r', 'id', 'id');
//       $rsm->addFieldResult('r','fromLat', 'fromLat');
//       $rsm->addFieldResult('r','fromLong', 'fromLong');
//       $rsm->addFieldResult('r','toLat', 'toLat');
//       $rsm->addFieldResult('r','toLong', 'toLong');
       $con = $this->getEntityManager()->getConnection();
       #$sth = $con->prepare('CALL get_closest_rides_by_distance(27.588426,47.152763,1000)');
       $sth = $con->prepare('CALL get_closest_rides_by_distance_1(?, ?, ?, ?)');
       $sth->bindParam(1, $long);
       $sth->bindParam(2, $lat);
       if($range < 0){
           $range = 100;
       }
       $sth->bindParam(3, $range);
       if($limit < 0){
           $limit = 100;
       }
       $sth->bindParam(4, $limit);
       $sth->execute();
       return $sth->fetchAll();


//       $q = $this->createQueryBuilder('p')
//               ->select('p.id, ( 3959 * ACOS( cos( radians(37) ) * cos( radians( to_lat ) ) * cos( radians( to_lng ) - radians(-122) ) + sin( radians(37) ) * sin( radians( to_lat ) ) ) ) as distance ')
//               ->having('distance < ?dist')
//               ->setParameter('dist', 25)
//               ->getQuery();
//
//       return $q->execute(null, $hydrationMode);


       /*

        CREATE PROCEDURE geodist (IN userid int, IN dist int)BEGINdeclare mylon double; declare mylat double;declare lon1 float; declare lon2 float;declare lat1 float; declare lat2 float;
        -- get the original lon and lat for the userid
select longitude, latitude into mylon, mylat from users5where id=userid limit 1;
        -- calculate lon and lat for the rectangle:
set lon1 = mylon-dist/abs(cos(radians(mylat))*69);set lon2 = mylon+dist/abs(cos(radians(mylat))*69);set lat1 = mylat-(dist/69); set lat2 = mylat+(dist/69);
        -- run the query:
SELECT destination.*,3956 * 2 * ASIN(SQRT( POWER(SIN((orig.lat -dest.lat) * pi()/180 / 2), 2) +COS(orig.lat * pi()/180) * COS(dest.lat * pi()/180) *POWER(SIN((orig.lon -dest.lon) * pi()/180 / 2), 2) )) asdistance FROM users destination, users originWHERE origin.id=userid
and destination.longitude between lon1 and lon2 and destination.latitude between lat1 and lat2
having distance < dist ORDER BY Distance limit 10;
        END $$

        *
        *
        *
        set @orig_lat=122.4058; set @orig_lon=37.7907;set @dist=10;
SELECT *,
3956 * 2 * ASIN(SQRT( POWER(SIN((@orig_lat - abs(dest.lat)) * pi()/180 / 2),2) + COS(@orig_lat * pi()/180 ) * COS(abs(dest.lat) *  pi()/180) * POWER(SIN((@orig_lon â€“ dest.lon) *  pi()/180 / 2), 2) ))
as distance FROM hotels dest having distance < @dist ORDER BY distance limit 10;
        *
        *
        *
        *
        *
        *
        *
        *
        * AIA BUNA AICI
        * 3959 - miles
        * 6371 - km
        CREATE PROCEDURE `sf_rwmt`.`get_closest_rides_by_distance` (IN mylon float, IN mylat float, IN dist float)
BEGIN


SELECT id, from_address AS fromAddress, to_address AS toAddress, to_lat AS toLat, to_long AS toLong, from_lat AS fromLat, from_long AS fromLong, created_at AS createdAt, updated_at AS updatedAt,  ( 6371 * acos( cos( radians(mylat) ) * cos( radians( to_lat ) ) * cos( radians( to_long ) - radians(mylon) ) + sin( radians(mylat) ) * sin( radians( to_lat ) ) ) ) AS distance FROM Ride HAVING distance < dist ORDER BY distance LIMIT 0 , 20;

END
        *
        *
        *
        */
   }
}
